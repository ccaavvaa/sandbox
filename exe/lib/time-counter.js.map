{"version":3,"sources":["../../src/lib/time-counter.ts"],"names":[],"mappings":"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","file":"time-counter.js","sourcesContent":["// tslint:disable:ban-types\r\nimport { HRTime, HRTimeTools } from './hrtime';\r\n\r\nexport class ExecTime {\r\n    public count: number = 0;\r\n    public min: HRTime = [Number.MAX_SAFE_INTEGER, 999999999];\r\n    public max: HRTime = HRTimeTools.ZERO;\r\n    public mean: HRTime = HRTimeTools.ZERO;\r\n    public total: HRTime = HRTimeTools.ZERO;\r\n    public addExecution(time: HRTime) {\r\n        this.count++;\r\n        if (HRTimeTools.compare(this.min, time) > 0) {\r\n            this.min = HRTimeTools.copy(time);\r\n        }\r\n        if (HRTimeTools.compare(time, this.max) > 0) {\r\n            this.max = HRTimeTools.copy(time);\r\n        }\r\n        this.total = HRTimeTools.add(this.total, time);\r\n        this.mean = HRTimeTools.divide(this.total, this.count);\r\n    }\r\n}\r\n\r\nexport interface FunctionInstrumentation {\r\n    name: string;\r\n    cls: Function;\r\n    func: Function;\r\n    execInfo: ExecTime;\r\n}\r\n\r\nexport class ExecTimeDetail extends ExecTime {\r\n    public readonly details: Map<string, ExecTimeDetail> = new Map<string, ExecTimeDetail>();\r\n}\r\nexport class TimeCounter {\r\n    public readonly instrumentations: Map<string, FunctionInstrumentation> = new Map<string, FunctionInstrumentation>();\r\n    public readonly details: Map<string, ExecTimeDetail> = new Map<string, ExecTimeDetail>();\r\n    private execInfos = new Map<string, ExecTime>();\r\n\r\n    private readonly stack: string[] = [];\r\n    public instrumentFunction(cls: Function, functionName: string) {\r\n        const func = cls.prototype[functionName] as Function;\r\n        const name = cls.name + '#' + functionName;\r\n        const execInfo = new ExecTime();\r\n        const instrumentation = {\r\n            name: func.name,\r\n            cls,\r\n            func,\r\n            execInfo,\r\n        };\r\n        this.instrumentations.set(name, instrumentation);\r\n        // tslint:disable-next-line:no-this-assignment\r\n        const that = this;\r\n        const mark = (t: HRTime) => {\r\n            that.stack.pop();\r\n            execInfo.addExecution(t);\r\n            let x: { details: Map<string, ExecTimeDetail> } = that;\r\n            for (const fName of that.stack) {\r\n                x = x.details.get(fName);\r\n            }\r\n            let d = x.details.get(name);\r\n            if (!d) {\r\n                d = new ExecTimeDetail();\r\n                x.details.set(name, d);\r\n            }\r\n            d.addExecution(t);\r\n        };\r\n        cls.prototype[functionName] = function () {\r\n            let time = process.hrtime();\r\n            let result: any;\r\n            let resultIsPromise: boolean;\r\n\r\n            that.stack.push(name);\r\n            let x: { details: Map<string, ExecTimeDetail> } = that;\r\n            for (const fName of that.stack) {\r\n                let d = x.details.get(fName);\r\n                if (!d) {\r\n                    d = new ExecTimeDetail();\r\n                    x.details.set(name, d);\r\n                }\r\n                x = d;\r\n            }\r\n\r\n            try {\r\n                result = func.apply(this, arguments);\r\n                const promise = Promise.resolve(result);\r\n                resultIsPromise = promise === result;\r\n                if (resultIsPromise) {\r\n                    return promise.then(\r\n                        (v) => {\r\n                            time = process.hrtime(time);\r\n                            mark(time);\r\n                            return v;\r\n                        },\r\n                        (reason) => {\r\n                            time = process.hrtime(time);\r\n                            mark(time);\r\n                            return Promise.reject(reason);\r\n                        }\r\n                    );\r\n                } else {\r\n                    time = process.hrtime(time);\r\n                    mark(time);\r\n                    return result;\r\n                }\r\n            } catch (e) {\r\n                time = process.hrtime(time);\r\n                mark(time);\r\n                throw e;\r\n            }\r\n        };\r\n    }\r\n\r\n    public cancel(): void {\r\n        for (const [key, value] of this.instrumentations) {\r\n            value.cls.prototype[value.func.name] = value.func;\r\n        }\r\n        this.instrumentations.clear();\r\n    }\r\n}\r\n"]}