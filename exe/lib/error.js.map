{"version":3,"sources":["../../src/lib/error.ts"],"names":[],"mappings":"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","file":"error.js","sourcesContent":["import * as http from 'http';\r\nexport interface IErrorData {\r\n    innerError?: IErrorData;\r\n    status?: number;\r\n    message: string;\r\n    details?: any;\r\n    stack?: string;\r\n}\r\nexport class MyError extends Error {\r\n    public static getDefaultMessage(code?: number) {\r\n        code = code || 500;\r\n        return http.STATUS_CODES[code];\r\n    }\r\n    public static toErrorData(err: any): IErrorData {\r\n        if (err instanceof MyError) {\r\n            const data: IErrorData = {\r\n                status: err.status,\r\n                stack: err.stack,\r\n                message: err.message,\r\n            };\r\n            if (err.innerError) {\r\n                data.innerError = MyError.toErrorData(err.innerError);\r\n            }\r\n            if (err.details) {\r\n                data.details = err.details;\r\n            }\r\n            return data;\r\n        }\r\n        if (err instanceof Error) {\r\n            const data: IErrorData = {\r\n                status: 500,\r\n                stack: err.stack,\r\n                message: err.message || MyError.getDefaultMessage(),\r\n            };\r\n            return data;\r\n        }\r\n        if (err) {\r\n            const data: IErrorData = {\r\n                status: 500,\r\n                message: err.toString(),\r\n            };\r\n            return data;\r\n        } else {\r\n            return {\r\n                status: 500,\r\n                message: MyError.getDefaultMessage(),\r\n            };\r\n        }\r\n    }\r\n\r\n    private static getCode(code?: number) {\r\n        code = code || 500;\r\n        return MyError.getDefaultMessage(code) ? code : 500;\r\n    }\r\n    private static getArgs(args: any[]): IErrorConstructorArgs {\r\n        let status: number;\r\n        let message: string;\r\n        let innerError: any;\r\n        let details: any;\r\n\r\n        if (args && args.length) {\r\n            let p1 = args[0];\r\n            if ((p1 instanceof Error) || ((typeof p1 !== 'number') && args.length >= 3) || args.length >= 4) {\r\n                innerError = p1;\r\n                args.splice(0, 1);\r\n            }\r\n            if (args.length === 0) {\r\n                status = 500;\r\n            } else if (typeof args[0] === 'number') {\r\n                status = args[0] || 500;\r\n                args.splice(0, 1);\r\n            } else {\r\n                status = 500;\r\n            }\r\n\r\n            if (args.length > 0) {\r\n                p1 = args[0];\r\n                if (typeof (p1) === 'string') {\r\n                    message = p1;\r\n                    if (args.length > 1) {\r\n                        details = args[1];\r\n                    }\r\n                } else {\r\n                    details = p1;\r\n                }\r\n            }\r\n        }\r\n        status = status || 500;\r\n        message = message || MyError.getDefaultMessage(status);\r\n        return { status, message, innerError, details };\r\n    }\r\n    public readonly status: number;\r\n    public readonly innerError: any;\r\n    public readonly details: any;\r\n    constructor(status?: number, message?: string);\r\n    constructor(innerError: any, status?: number, message?: string, details?: any);\r\n    constructor(innerError: any, message: string, details?: any);\r\n    constructor(...args: any[]) {\r\n        const info = MyError.getArgs(args);\r\n        super(info.message);\r\n        this.status = info.status;\r\n        this.innerError = info.innerError;\r\n        this.details = info.details;\r\n    }\r\n}\r\n\r\nexport interface IErrorConstructorArgs {\r\n    status: number;\r\n    message: string;\r\n    innerError: any;\r\n    details: any;\r\n}\r\n"]}